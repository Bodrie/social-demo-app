// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String
  name          String
  userName      String
  profilePic    String        @default("http://domain.com/default_photo")
  coverPic      String?
  city          String?
  posts         Post[]
  comments      Comment[]
  likedPosts    LikePost[]
  likedComments LikeComment[]
  following     Follow[]      @relation("FollowingUsers")
  followers     Follow[]      @relation("FollowedUsers")
  dateCreated   DateTime      @default(now())

  @@map("user")
}

model Post {
  id          String     @id @default(uuid())
  userId      String
  content     String
  picture     String?
  user        User       @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       LikePost[]
  dateCreated DateTime   @default(now())

  @@map("post")
}

model Comment {
  id          String        @id @default(uuid())
  content     String
  userId      String
  postId      String?
  user        User          @relation(fields: [userId], references: [id])
  post        Post?         @relation(fields: [postId], references: [id])
  likes       LikeComment[]
  dateCreated DateTime      @default(now())

  @@map("comment")
}

model LikePost {
  id          String   @id @default(uuid())
  userId      String
  postId      String
  user        User     @relation(fields: [userId], references: [id])
  post        Post     @relation(fields: [postId], references: [id])
  dateCreated DateTime @default(now())

  @@map("like_post")
}

model LikeComment {
  id          String   @id @default(uuid())
  userId      String
  commentId   String
  user        User     @relation(fields: [userId], references: [id])
  comment     Comment  @relation(fields: [commentId], references: [id])
  dateCreated DateTime @default(now())

  @@map("like_comment")
}

model Follow {
  id          String   @id @default(uuid())
  followingId String
  followedId  String
  following   User     @relation("FollowingUsers", fields: [followingId], references: [id])
  followed    User     @relation("FollowedUsers", fields: [followedId], references: [id])
  dateCreated DateTime @default(now())

  @@map("relationships")
}
